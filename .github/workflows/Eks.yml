jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Set up AWS credentials using IAM role
      - name: Set up AWS credentials using IAM role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::904233086993:role/GITHUB-ACTIONS-RUNNER
          role-session-name: github-actions-session
          aws-region: ${{ inputs.AWS_REGION }}

      # Step 2: ECR Login
      - name: ECR Login
        run: |
          aws ecr get-login-password --region ${{ inputs.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com

      # Step 3: CodeArtifact Connection
      - name: CodeArtifact Connection
        run: |
          aws codeartifact login --tool dotnet --repository nuget-repo --domain batched --domain-owner ${{ secrets.AWS_ACCOUNT_ID }}
          aws codeartifact login --tool npm --repository npm-repo --domain batched --domain-owner ${{ secrets.AWS_ACCOUNT_ID }}

      # Step 4: Build & Push Docker Image
      - name: Build & Push Docker Image
        run: |
          aws ssm get-parameter --name "backend-env" --with-decryption --output text --query "Parameter.Value" > .env
          aws ssm get-parameter --name "reporting-service" --with-decryption --output text --query "Parameter.Value" > Batched.Reporting.Web/appsettings.json
          docker build --build-arg AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT_ID }} --build-arg AWS_REGION=${{ inputs.AWS_REGION }} --no-cache -t ${{ inputs.app_name }} .
          docker tag ${{ inputs.app_name }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.app_name }}:v-0.0.${{ github.run_number }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.app_name }}:v-0.0.${{ github.run_number }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Set up AWS credentials using IAM role
      - name: Set up AWS credentials using IAM role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::904233086993:role/GITHUB-ACTIONS-RUNNER
          role-session-name: github-actions-session
          aws-region: ${{ inputs.AWS_REGION }}

      # Step 2: Set up KUBECONFIG for Helm Deployment
      - name: Set up KUBECONFIG
        run: |
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      # Step 3: Deploy using Helm with the 'deliverybot/helm' GitHub Action
      - name: Deploy to Kubernetes using Helm
        uses: deliverybot/helm@v1
        with:
          release: ${{ inputs.app_name }}  # Helm release name
          namespace: ${{ inputs.deploy_to }}  # The environment to deploy to (e.g., production or staging)
          chart: './charts/${{ inputs.app_name }}'  # Path to your Helm chart
          token: '${{ github.token }}'  # GitHub token for authentication
          values: |
            name: ${{ inputs.app_name }}
            environment: ${{ inputs.deploy_to }}  # Pass deploy environment (e.g., dev, prod)
          value-files: >-
            [
              "values.yaml", 
              "values.${{ inputs.deploy_to }}.yaml"
            ]
          set: |
            image.tag=${{ github.sha }}  # Dynamically set the image tag, for example, using the commit SHA
        env:
          KUBECONFIG: '${{ secrets.KUBECONFIG }}'  # Provide the Kubernetes config file through secret
