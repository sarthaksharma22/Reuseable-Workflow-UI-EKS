name: Reusable Deployment Pipeline

on:
  workflow_call:
    inputs:
      deploy_to:
        description: 'Deployment environment (e.g., development, production)'
        required: true
        type: string
      AWS_REGION:
        description: 'AWS region for deployment'
        required: true
        type: string
      deploy_dir:
        description: 'Directory where deploy scripts are located'
        required: true
        type: string
      app_name:
        description: 'Application name to deploy'
        required: true
        type: string
    permissions:
      id-token: write
      contents: read

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Assume AWS Role and set up AWS credentials
      - name: Set up AWS credentials using IAM role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::904233086993:role/GITHUB-ACTIONS-RUNNER  # Replace with your IAM role ARN
          role-session-name: github-actions-session  # A custom session name
          aws-region: ${{ inputs.AWS_REGION }}  # AWS region passed as input

      # Step 2: Install dependencies
      - name: Install dependencies
        run: |
          rm -rf ~/.npmrc
          aws ssm get-parameter --name "frontend-env" --with-decryption --output text --query "Parameter.Value" > .env
          npm install --legacy-peer-deps

      # Step 3: Build application
      - name: Build application
        run: |
          npm run build

      # Step 4: Deploy to AWS S3
      - name: Deploy to AWS S3
        run: |
          aws s3 sync build s3://batched-${{ inputs.deploy_to }}-ui/

      # Step 5: Invalidate CloudFront Cache
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFORMATION_ID }} --paths "/*"
